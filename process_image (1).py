# -*- coding: utf-8 -*-
"""Process_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dnL6PA2IfgBuV0Pp4wQaj02mt44HacVA
"""

from google.colab import drive

drive.mount('/content/drive/')

!unzip '/content/drive/MyDrive/Do_An_MachineLearning/UIT-VC.zip'

import numpy as np
import tensorflow as tf
import os
import cv2
from keras.preprocessing import image
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import OneHotEncoder

#truy cập vòa file chứa ảnh
f1=os.path.join("/content/UIT-VC/Train")
print(f1) # in các tên forder trong file f1
data=[]
labels=[]

for i in os.listdir(f1):
    cla=os.path.join(f1,i)
    data1=[]
    for img in os.listdir(cla):
        data1.append(os.path.join(cla,img))
        labels.append(i)
    data.append(data1)

s=0
X=[]
Y=labels
for i in data:
    for j in i:
        s+=1
        try:
            img=cv2.imread(j)
            images=cv2.resize(img,(28,28))
            images2=image.img_to_array(images)
            X.append(images2)
        except Exception as e:
            print(j)
            Y.pop(s-1)
            s-=1
            print(e)

print(type(X))
print(len(X))
print(type(X[1]))
print(X[1].shape)

!rm '/content/UIT-VC/Train/car/vd006855.jpg'
!rm '/content/UIT-VC/Train/van/vd006219.jpg'

pip install category_encoders

from sklearn.preprocessing import LabelEncoder
import numpy as np
le = LabelEncoder()
encoded = le.fit_transform(np.ravel(Y))

X_tmp=np.array(X,dtype="float32")
X_tmp=np.reshape(X_tmp,(len(Y),-1))
print(X_tmp.shape)

Y_encode = encoded
from sklearn.svm import SVC
classifier = SVC(kernel ="rbf")
classifier.fit(X_tmp, Y_encode)

import pickle
from joblib import dump, load

filename = 'Model_SVM_Kernel_rbf'
pickle.dump(classifier, open(filename, 'wb'))

import numpy as np
import tensorflow as tf
import os
import cv2
from keras.preprocessing import image
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import OneHotEncoder
#truy cập vòa file chứa ảnh
f1=os.path.join("/content/UIT-VC/Test")
print(f1) # in các tên forder trong file f1
data_test=[]
labels_test=[]

for i in os.listdir(f1):
    cla=os.path.join(f1,i)
    data1=[]
    for img in os.listdir(cla):
        data1.append(os.path.join(cla,img))
        labels_test.append(i)
    data_test.append(data1)

s=0
X_test=[]
Y_test=labels_test
for i in data_test:
    for j in i:
        s+=1
        try:
            img=cv2.imread(j)
            images=cv2.resize(img,(28,28))
            images=image.img_to_array(images)
            X_test.append(images2)
        except Exception as e:
            print(j)
            Y_test.pop(s-1)
            s-=1
            print(e)
X_test=np.array(X_test,dtype="float32")
X_test=np.reshape(X_test,(len(Y_test),-1))
print(X_test.shape)
le = LabelEncoder()
Y_test = le.fit_transform(np.ravel(Y_test))

!rm '/content/UIT-VC/Test/motor/vd0064779.jpg'
!rm '/content/UIT-VC/Test/truck/vd006418.jpg'



from sklearn.preprocessing import LabelEncoder
import numpy as np
le = LabelEncoder()
Y_test = le.fit_transform(np.ravel(Y_test))

import pickle
filename = '/content/drive/MyDrive/Model_SVM_Kernel_rbf'
classifier = pickle.load(open(filename, 'rb'))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, classifier.predict(X_test))
print(cm)

Y_tmp = Y_test
Y_tmp = le.inverse_transform(Y_tmp)
le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(le_name_mapping)

Y_predict = classifier.predict(X_test)

from sklearn.metrics import f1_score
f1_score_SVM = f1_score(Y_test,Y_predict,average='weighted')
print(f1_score_SVM)